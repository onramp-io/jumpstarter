swagger: '2.0'
info:
  description: |
    This is JumpStarter API documentation.
  version: 1.0.0
  title: JumpStarter
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: jumpstarter.swagger.io
# basePath: /v2
tags:
  - name: Users
    description: JumpStarter users
  - name: Projects
    description: JumpStarter projects
  - name: Investments
    description: JumpStarter investments

paths:
  # ===============
  # = Users API
  # ===============

  # 1. Create a new user [POST /api/users/new]
  /api/user/new:
    post:
      tags:
        - Users
      summary: Create a new user.
      description: Store a user in DB after a user is created in AWS Cognito.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation

  # 2. Create a new user [GET /api/users/:id]
  /api/users/user/{userId}:
    get:
      tags:
        - Users
      summary: Get an user
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful Operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: User not found

  # 3. Get all users [GET /api/users]
  /api/users/all:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: getAllUsers
      produces:
        - application/json
      responses:
        200:
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  # 4. Update an user [PUT /api/user/update/:id]
  /api/users/user/update/{userId}:
    put:
      tags:
        - Users
      description: PUT  Fields => (first_name, last_name, email, avatar, bio, interests)
      summary: Update an user
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: UserId.
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Successful Operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: User not found

  # 5. Delete an user [DELETE /api/user/delete/:id]
  /api/users/user/delete/{userId}:
    delete:
      tags:
        - Users
      summary: Delete an user
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful Operation
        400:
          description: User not found

  # 6. Get a user's projects [GET /api/user/:id/projects]
  /api/users/user/{userId}/projects:
    get:
      tags:
        - Users
      summary: Get a user's projects
      operationId: getUserProjects
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Projects'
        400:
          description: User not found

  # 7. Get a user's projects by id [GET /api/user/:id/projects/:id]
  /api/users/user/{userId}/projects/{projectId}:
    get:
      tags:
        - Users
      summary: Get a user's projects by id
      operationId: getUserProjectsById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
        - name: projectId
          in: path
          description: ID of project
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful Operation
          schema:
            $ref: '#/definitions/Projects'
        400:
          description: User not found

  # 8. Create a new project [POST /api/user/:id/projects/new]
  /api/users/user/{userId}/projects/new:
    post:
      tags:
        - Users
      summary: Create a new project
      operationId: createUserProject
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Created project object
          required: true
          schema:
            $ref: '#/definitions/Projects'
      responses:
        200:
          description: successful operation

  # 9. Update a project [PUT /api/user/:id/projects/update/:id]
  /api/users/user/{userId}/projects/update/{projectId}:
    put:
      tags:
        - Users
      summary: Update a project
      description: PUT Fields => (title, description, pictures, category, fund_goal)
      operationId: updateUserProject
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
        - name: projectId
          in: path
          description: ID of project
          required: true
          type: integer
          format: int64

        - in: body
          name: body
          description: Updated project object
          required: true
          schema:
            $ref: '#/definitions/Projects'
      responses:
        200:
          description: Successful Operation
          schema:
            $ref: '#/definitions/Projects'
        400:
          description: User not found

  # 10. Delete a project [DELETE /api/user/:id/projects/delete/:id]
  /api/users/user/{userId}/projects/delete/{projectId}:
    delete:
      tags:
        - Users
      summary: Delete a project
      operationId: deleteUserProject
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
        - name: projectId
          in: path
          description: ID of project
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful Operation
        400:
          description: User not found

  # 11. Get a user's investments [GET /api/user/:id/investments]
  /api/users/user/{userId}/investments:
    get:
      tags:
        - Users
      summary: Get a user's investments
      operationId: getUserInvestments
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Investments'
        400:
          description: User not found

  # 12. Get a user's investments by id [GET /api/user/:id/investments/:id]
  /api/users/user/{userId}/investments/{investmentId}:
    get:
      tags:
        - Users
      summary: Get a user's investments by id
      operationId: getUserInvestmentsById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
        - name: investmentId
          in: path
          description: ID of investment
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful Operation
          schema:
            $ref: '#/definitions/Investments'
        400:
          description: User not found

  # 13. Create a new investment [POST /api/user/:id/investments/new]
  /api/users/user/{userId}/investments/new:
    post:
      tags:
        - Users
      summary: Create a new investment
      operationId: createUserInvestment
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Created investment object
          required: true
          schema:
            $ref: '#/definitions/Investments'
      responses:
        200:
          description: successful operation

  # ===============
  # = Projects
  # ===============

  # 1. Get all projects [GET /api/projects]
  /api/projects:
    get:
      tags:
        - Projects
      summary: Get all projects
      operationId: getProjects
      produces:
        - application/json
      responses:
        200:
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Projects'
        400:
          description: User not found

  # 2. Get a project by id [GET /api/projects/:id]
  /api/projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Get a project by id
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful Operation
          schema:
            $ref: '#/definitions/Projects'
        400:
          description: User not found

  # 3. Get project by category [GET /api/projects/category/:category]
  /api/projects/category/{category}:
    get:
      tags:
        - Projects
      summary: Get project by category
      operationId: getProjectsByCategory
      produces:
        - application/json
      parameters:
        - name: category
          in: path
          description: Category of project
          required: true
          type: string
      responses:
        200:
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Projects'
        400:
          description: User not found

  # 4. Get project by Sort Type [GET /api/projects/type/:sortType]
  /api/projects/type/{sortType}:
    get:
      tags:
        - Projects
      summary: Get project by sort type
      operationId: getProjectsBySortType
      produces:
        - application/json
      parameters:
        - name: sortType
          in: path
          description: Sort type of project
          required: true
          type: string
      responses:
        200:
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Projects'
        400:
          description: User not found

  # ===============
  # = Investments
  # ===============

  # 1. Get all investments [GET /api/investments]
  /api/investments:
    get:
      tags:
        - Investments
      summary: Get all investments
      operationId: getInvestments
      produces:
        - application/json
      responses:
        200:
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Investments'
        400:
          description: User not found

definitions:
  # ===============
  # = User
  # ===============
  User:
    type: object
    properties:
      id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      avatar:
        type: string
      bio:
        type: string
      interests:
        type: array
        items:
          $ref: '#/definitions/Interests'
      projects:
        type: array
        items:
          $ref: '#/definitions/Projects'
      investments:
        type: array
        items:
          $ref: '#/definitions/Investments'
      total_invested_amount:
        type: integer
      payment_methods:
        type: array
        items:
          $ref: '#/definitions/PaymentMethods'
    xml:
      name: User

  # ===============
  # = Interests
  # ===============
  Interests:
    type: object
    properties:
      id:
        type: integer
        format: int64
      interest_id:
        type: array
        items:
          $ref: '#/definitions/Categories'
    xml:
      name: Interests

  # ===============
  # = Projects
  # ===============
  Projects:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      user_id:
        type: string
      pictures:
        type: array
        items:
          $ref: '#/definitions/Pictures'
      category:
        type: string
        items:
          $ref: '#/definitions/Categories'
      description:
        type: string
      fund_tiers:
        type: array
        items:
          $ref: '#/definitions/FundTiers'
      fund_goal:
        type: integer
        format: int64
      fund_raised:
        type: integer
        format: int64
      launched_date:
        type: string
        format: date-time
      end_date:
        type: string
        format: date-time
      likes:
        type: integer
        format: int64
      comments:
        type: array
        items:
          $ref: '#/definitions/Comments'
      investors:
        type: array
        items:
          $ref: '#/definitions/User'
    xml:
      name: Projects

  # ===============
  # = Category
  # ===============
  Categories:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category

  # ===============
  # = Comments
  # ===============
  Comments:
    type: object
    properties:
      id:
        type: integer
        format: int64
      user_id:
        type: string
      project_id:
        type: string
      comment:
        type: string
      created_at:
        type: string
        format: date-time
    xml:
      name: Comments

  # ===============
  # = Investments
  # ===============
  Investments:
    type: object
    properties:
      id:
        type: integer
        format: int64
      user_id:
        type: string
      project_id:
        type: string
      amount:
        type: integer
        format: int64
      status:
        type: string
        description: Investment Status
        enum:
          - pending
          - approved
          - rejected
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
    xml:
      name: Investments

  # ===============
  # = Payment Methods
  # ===============
  PaymentMethods:
    type: object
    properties:
      id:
        type: integer
        format: int64
      user_id:
        type: string
      payment_method_id:
        type: string
        description: Payment Method
      card_holder_name:
        type: string
      card_last_four:
        type: string
      expiry_date:
        type: string
        format: date-time
      card_brand:
        type: string

    xml:
      name: PaymentMethods

  # ===============
  # PICTURES
  # ===============
  Pictures:
    type: object
    properties:
      id:
        type: integer
        format: int64
      picture_url:
        type: string
    xml:
      name: Pictures

  # ===============
  # FUND TIERS
  # ===============
  FundTiers:
    type: object
    properties:
      id:
        type: integer
        format: int64
      fund_tier_name:
        type: string
    xml:
      name: FundTiers

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /tapabratadey/JumpStarter/1.0.0
schemes:
  - https
  - http
